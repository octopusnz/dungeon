name: Deploy WASM to GitHub Pages
on:
  push:
    branches: [ master ]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: pages-deploy
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: wasm32-unknown-unknown
      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: wasm-${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            wasm-${{ runner.os }}-
      - name: Install wasm-bindgen-cli (match lockfile)
        run: |
          set -euo pipefail
          VERSION=$(grep -A1 'name = "wasm-bindgen"' Cargo.lock | grep 'version =' | head -n1 | cut -d '"' -f2)
          echo "Using wasm-bindgen-cli version ${VERSION}"
          if ! command -v wasm-bindgen >/dev/null; then
            cargo install wasm-bindgen-cli --version "${VERSION}" --locked
          else
            INSTALLED=$(wasm-bindgen --version | awk '{print $2}')
            if [ "${INSTALLED}" != "${VERSION}" ]; then
              cargo install wasm-bindgen-cli --force --version "${VERSION}" --locked
            fi
          fi
      - name: Configure Pages
        uses: actions/configure-pages@v5
      - name: Run tests (CLI feature)
        env:
          RUSTFLAGS: -Dwarnings
        run: cargo test --features cli --quiet
      - name: Clippy lint (all targets)
        run: cargo clippy --all-targets --all-features -- -D warnings
      - name: Format check
        run: cargo fmt --all -- --check
      - name: Build (wasm)
        run: |
          cargo build --release --target wasm32-unknown-unknown --features wasm --lib
          mkdir -p web/pkg
          wasm-bindgen --target web --no-typescript --out-dir web/pkg target/wasm32-unknown-unknown/release/dungeon_core.wasm
          # Add a simple version stamp for cache busting
          echo "build_sha=$(git rev-parse --short HEAD)" > web/pkg/version.txt
          # Ensure a .nojekyll file so GitHub Pages serves files verbatim
          touch web/.nojekyll
          # Basic sanity check for expected artifacts
          test -f web/index.html || { echo 'index.html missing in web/'; exit 1; }
          test -f web/pkg/dungeon_core_bg.wasm || { echo 'wasm-bindgen output missing'; ls -R web/pkg; exit 1; }
      - name: Cache Binaryen
        id: cache-binaryen
        uses: actions/cache@v4
        with:
          path: ~/binaryen
          key: binaryen-${{ runner.os }}-version_121
      - name: Install Binaryen (cached)
        if: steps.cache-binaryen.outputs.cache-hit != 'true'
        run: |
          set -euo pipefail
          VERSION=121
            curl -L -o /tmp/binaryen.tar.gz "https://github.com/WebAssembly/binaryen/releases/download/version_${VERSION}/binaryen-version_${VERSION}-x86_64-linux.tar.gz"
            mkdir -p ~/binaryen
            tar -xzf /tmp/binaryen.tar.gz -C ~/binaryen --strip-components=1
            echo "Installed Binaryen version ${VERSION}"            
      - name: Optimize WASM (wasm-opt -Oz)
        run: |
          export PATH="${HOME}/binaryen/bin:${PATH}"
          echo "Using wasm-opt version:" && wasm-opt --version || true
          echo "Listing detected module features (pre-opt):" && wasm-opt --print-features web/pkg/dungeon_core_bg.wasm || true
          # Use all feature flags to avoid validator rejects for bulk memory etc.
          if ! wasm-opt --all-features -Oz -o web/pkg/dungeon_core_bg.opt.wasm web/pkg/dungeon_core_bg.wasm; then
            echo "Primary optimization with validation failed; retrying with --no-validation (features forced).";
            wasm-opt --all-features --no-validation -Oz -o web/pkg/dungeon_core_bg.opt.wasm web/pkg/dungeon_core_bg.wasm || {
              echo "wasm-opt failed even with --no-validation"; exit 1; }
          fi
          mv web/pkg/dungeon_core_bg.opt.wasm web/pkg/dungeon_core_bg.wasm
          echo "Post-opt size:" && ls -lh web/pkg/dungeon_core_bg.wasm
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: web
  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
      - name: Summarize deployed URL
        run: |
          echo "Deployed to: ${{ steps.deployment.outputs.page_url }}" | tee -a "$GITHUB_STEP_SUMMARY"
          echo "Commit: $GITHUB_SHA" >> "$GITHUB_STEP_SUMMARY"
