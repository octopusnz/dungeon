name: Deploy WASM to GitHub Pages
on:
  push:
    branches: [ master ]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: pages-deploy
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: wasm32-unknown-unknown
      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: wasm-${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            wasm-${{ runner.os }}-
      - name: Install wasm-bindgen-cli (match lockfile)
        run: |
          VERSION=$(grep -m1 'name = "wasm-bindgen"' -n Cargo.lock >/dev/null 2>&1 && grep -A1 'name = "wasm-bindgen"' Cargo.lock | grep version | head -n1 | cut -d '"' -f2)
          echo "Using wasm-bindgen-cli version ${VERSION}"
          if ! command -v wasm-bindgen >/dev/null; then
            cargo install wasm-bindgen-cli --version "${VERSION}" --locked
          else
            INSTALLED=$(wasm-bindgen --version | awk '{print $2}')
            if [ "${INSTALLED}" != "${VERSION}" ]; then
              cargo install wasm-bindgen-cli --force --version "${VERSION}" --locked
            fi
          fi
      - name: Configure Pages
        uses: actions/configure-pages@v5
      - name: Run tests (CLI feature)
        env:
          RUSTFLAGS: -Dwarnings
        run: cargo test --features cli --quiet
      - name: Clippy lint (all targets)
        run: cargo clippy --all-targets --all-features -- -D warnings
      - name: Build (wasm)
        run: |
          cargo build --release --target wasm32-unknown-unknown --features wasm --lib
          mkdir -p web/pkg
          wasm-bindgen --target web --no-typescript --out-dir web/pkg target/wasm32-unknown-unknown/release/dungeon_core.wasm
          # Optional optimization if binaryen available (commented)
          # sudo apt-get update && sudo apt-get install -y binaryen && wasm-opt -Oz -o web/pkg/dungeon_core_bg.opt.wasm web/pkg/dungeon_core_bg.wasm && mv web/pkg/dungeon_core_bg.opt.wasm web/pkg/dungeon_core_bg.wasm
          # Add a simple version stamp for cache busting
          echo "build_sha=$(git rev-parse --short HEAD)" > web/pkg/version.txt
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: web
  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
      - name: Summarize deployed URL
        run: |
          echo "Deployed to: $GITHUB_PAGES_URL" | tee -a "$GITHUB_STEP_SUMMARY"
        env:
          GITHUB_PAGES_URL: ${{ steps.deployment.outputs.page_url }}
